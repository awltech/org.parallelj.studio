// automatically generated by Xtext
grammar org.parallelj.Pjl with org.eclipse.xtext.common.Terminals

import "platform:/resource/org.parallelj.model/model/parallelj.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Specification returns Specification:
	{Specification}
	(programs+=Program ("," programs+=Program)*)?
	('metaInformationContainer' metaInformationContainer=MetaInformationContainer)?;

Program returns Program:
	'Program'
	name=EString
	'{'
	('description' description=EString)?
	('capacity' capacity=EInt)?
	'inputCondition' inputCondition=[InputCondition|EString]
	'outputCondition' outputCondition=[OutputCondition|EString]
	('predicates' '{' predicates+=Predicate ("," predicates+=Predicate)* '}')?
	(elements+=Element ("," elements+=Element)*)?
	('data' '{' data+=Data ("," data+=Data)* '}')?
	'}';

MetaInformationContainer returns MetaInformationContainer:
	{MetaInformationContainer}
	'MetaInformationContainer'
	'{'
	('metaInformation' '{' metaInformation+=MetaInformation ("," metaInformation+=MetaInformation)* '}')?
	'}';

MetaInformation returns MetaInformation:
	{MetaInformation}
	'MetaInformation';

BusinessProcedure returns BusinessProcedure:
	{BusinessProcedure}
	'BusinessProcedure'
	name=EString
	'{'
	('description' description=EString)?
	('executable' executable=EString)?
	('join' join=JoinType)?
	('split' split=SplitType)?
	('capacity' capacity=EInt)?
	('inputLinks' '(' inputLinks+=[Link|EString] ("," inputLinks+=[Link|EString])* ')')?
	('outputLinks' '{' outputLinks+=Link ("," outputLinks+=Link)* '}')?
	'}';

Element returns Element:
	Element_Impl | InputCondition | OutputCondition | Condition_Impl | Procedure_Impl | ForEachLoop | WhileLoop | Handler
	| Pipeline | BusinessProcedure;

Procedure returns Procedure:
	Procedure_Impl | ForEachLoop | WhileLoop | Handler | Pipeline | BusinessProcedure;

EString returns ecore::EString:
	STRING | ID;

Link returns Link:
	'Link'
	name=EString
	'{'
	('description' description=EString)?
	('predicate' predicate=[Predicate|EString])?
	'destination' destination=[Element|EString]
	'}';

enum JoinType returns JoinType:
	AND='AND' | OR='OR' | XOR='XOR';

enum SplitType returns SplitType:
	AND='AND' | OR='OR' | XOR='XOR';

EInt returns ecore::EInt:
	'-'? INT;

Predicate returns Predicate:
	{Predicate}
	'Predicate'
	name=EString
	'{'
	('description' description=EString)?
	'}';

Element_Impl returns Element:
	{Element}
	'Element'
	name=EString
	'{'
	('description' description=EString)?
	('inputLinks' '(' inputLinks+=[Link|EString] ("," inputLinks+=[Link|EString])* ')')?
	('outputLinks' '{' outputLinks+=Link ("," outputLinks+=Link)* '}')?
	'}';

InputCondition returns InputCondition:
	{InputCondition}
	'InputCondition'
	name=EString
	'{'
	('description' description=EString)?
	('inputLinks' '(' inputLinks+=[Link|EString] ("," inputLinks+=[Link|EString])* ')')?
	('outputLinks' '{' outputLinks+=Link ("," outputLinks+=Link)* '}')?
	'}';

OutputCondition returns OutputCondition:
	{OutputCondition}
	'OutputCondition'
	name=EString
	'{'
	('description' description=EString)?
	('inputLinks' '(' inputLinks+=[Link|EString] ("," inputLinks+=[Link|EString])* ')')?
	('outputLinks' '{' outputLinks+=Link ("," outputLinks+=Link)* '}')?
	'}';

Condition_Impl returns Condition:
	{Condition}
	'Condition'
	name=EString
	'{'
	('description' description=EString)?
	('inputLinks' '(' inputLinks+=[Link|EString] ("," inputLinks+=[Link|EString])* ')')?
	('outputLinks' '{' outputLinks+=Link ("," outputLinks+=Link)* '}')?
	'}';

Procedure_Impl returns Procedure:
	{Procedure}
	'Procedure'
	name=EString
	'{'
	('description' description=EString)?
	('executable' executable=EString)?
	('join' join=JoinType)?
	('split' split=SplitType)?
	('capacity' capacity=EInt)?
	('inputLinks' '(' inputLinks+=[Link|EString] ("," inputLinks+=[Link|EString])* ')')?
	('outputLinks' '{' outputLinks+=Link ("," outputLinks+=Link)* '}')?
	'}';

ForEachLoop returns ForEachLoop:
	'ForEachLoop'
	name=EString
	'{'
	('description' description=EString)?
	('executable' executable=EString)?
	('join' join=JoinType)?
	('split' split=SplitType)?
	('capacity' capacity=EInt)?
	('inputLinks' '(' inputLinks+=[Link|EString] ("," inputLinks+=[Link|EString])* ')')?
	'iterable' iterable=[Data|EString]
	('outputLinks' '{' outputLinks+=Link ("," outputLinks+=Link)* '}')?
	'}';

WhileLoop returns WhileLoop:
	'WhileLoop'
	name=EString
	'{'
	('description' description=EString)?
	('executable' executable=EString)?
	('join' join=JoinType)?
	('split' split=SplitType)?
	('capacity' capacity=EInt)?
	('inputLinks' '(' inputLinks+=[Link|EString] ("," inputLinks+=[Link|EString])* ')')?
	'predicate' predicate=[Predicate|EString]
	('outputLinks' '{' outputLinks+=Link ("," outputLinks+=Link)* '}')?
	'}';

Handler returns Handler:
	{Handler}
	'Handler'
	name=EString
	'{'
	('description' description=EString)?
	('executable' executable=EString)?
	('join' join=JoinType)?
	('split' split=SplitType)?
	('capacity' capacity=EInt)?
	('inputLinks' '(' inputLinks+=[Link|EString] ("," inputLinks+=[Link|EString])* ')')?
	('procedures' '(' procedures+=[Procedure|EString] ("," procedures+=[Procedure|EString])* ')')?
	('outputLinks' '{' outputLinks+=Link ("," outputLinks+=Link)* '}')?
	'}';

Pipeline returns Pipeline:
	'Pipeline'
	name=EString
	'{'
	('description' description=EString)?
	('executable' executable=EString)?
	('join' join=JoinType)?
	('split' split=SplitType)?
	('capacity' capacity=EInt)?
	('inputLinks' '(' inputLinks+=[Link|EString] ("," inputLinks+=[Link|EString])* ')')?
	'iterable' iterable=[Data|EString]
	('outputLinks' '{' outputLinks+=Link ("," outputLinks+=Link)* '}')?
	('procedures' '{' procedures+=Procedure ("," procedures+=Procedure)* '}')?
	'}';

Data returns Data:
	{Data}
	'Data'
	name=EString
	'{'
	('description' description=EString)?
	('type' type=EString)?
	'}';
