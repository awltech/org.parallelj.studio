«IMPORT parallelj»
«EXTENSION org::parallelj::codegen::extensions::common»

«DEFINE quartzExecution FOR Object»
@org.parallelj.launching.QuartzExecution
«ENDDEFINE»

«DEFINE generated FOR Object»
@javax.annotation.Generated(«getGeneratorNameStr()»)
«ENDDEFINE»

«DEFINE suppressWarnings FOR Object»
@java.lang.SuppressWarnings("unchecked")
«ENDDEFINE»

«DEFINE generatedWithHashToBeComputed FOR Object»
@javax.annotation.Generated(value = «getGeneratorNameStr()», comments = "ToBeCalculated")
«ENDDEFINE»

«DEFINE elementLinks FOR Link-»
«IF this.destination.metaType == OutputCondition -»
«getOutputConditionName()-»
«ELSE-»
"«this.destination.name.toFirstLower()»"
«ENDIF-»
«ENDDEFINE»

«DEFINE elementSplitLinks FOR Link-»
@org.parallelj.Link(predicate="«this.predicate.name-»", to=«EXPAND Annotation::elementLinks FOR this-»)
«ENDDEFINE»

«DEFINE elementHandler FOR Procedure-»
"«this.getElementName()»"
«ENDDEFINE»

«DEFINE handler FOR Handler -»
@org.parallelj.Handler({«EXPAND Annotation::elementHandler FOREACH this.procedures SEPARATOR "," -»})
«ENDDEFINE»

«DEFINE elementJoinCondition FOR Link-»
"«((Element)this.eContainer).name.toFirstLower()»"
«ENDDEFINE»

«DEFINE join FOR Procedure-»
«IF !this.inputLinks.select(l|l.eContainer.metaType == InputCondition).isEmpty»
@org.parallelj.Begin
«ELSEIF this.join.toString().matches("AND") -»
@org.parallelj.AndJoin
«ELSEIF this.join.toString().matches("OR") -»
@org.parallelj.OrJoin
«ELSE-»
@org.parallelj.XorJoin
«ENDIF-»
«IF !this.inputLinks.select(l|l.eContainer.metaType == Condition && l.eContainer.metaType != InputCondition).isEmpty-»
({«EXPAND Annotation::elementJoinCondition FOREACH this.inputLinks.select(l|l.eContainer.metaType == Condition && l.eContainer.metaType != InputCondition) SEPARATOR ","-»})
«ENDIF-»
«ENDDEFINE»

«DEFINE program FOR Program-»
@org.parallelj.Program
«ENDDEFINE»

 
«DEFINE split FOR Procedure-»
	«IF this.split == null && this.metaType == Handler -»
@org.parallelj.AndSplit({«getOutputConditionName()-»})
	«ELSEIF this.split.toString().matches("AND")-»
@org.parallelj.AndSplit({«EXPAND Annotation::elementLinks FOREACH this.outputLinks SEPARATOR "," -»})
	«ELSEIF this.split.toString().matches("OR")-»
@org.parallelj.OrSplit({«EXPAND Annotation::elementSplitLinks FOREACH this.outputLinks SEPARATOR "," -»})
	«ELSE-»
@org.parallelj.XorSplit({«EXPAND Annotation::elementSplitLinks FOREACH this.outputLinks SEPARATOR "," -»})
	«ENDIF-»
«ENDDEFINE»
 
«DEFINE whileLoop FOR WhileLoop-»
@org.parallelj.While("«this.predicate.getPredicateName()-»")
«ENDDEFINE»

«DEFINE capacityP  FOR Program-»
@org.parallelj.Capacity(«this.capacity»)
«ENDDEFINE»

«DEFINE capacity  FOR Procedure-»
@org.parallelj.Capacity(«this.capacity»)
«ENDDEFINE»

«DEFINE forEach  FOR ForEachLoop-»
@org.parallelj.ForEach("«this.iterable.name»") Object val «ENDDEFINE»
«REM»
@org.parallelj.ForEach("«this.iterable.name»") «getGeneric(this.iterable.type)» val «ENDDEFINE»
«ENDREM»
